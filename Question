Web Server Log Analysis - Python Take-Home
Assessment

Overview
This assessment involves analyzing the Calgary HTTP dataset, which contains
approximately one year's worth of HTTP requests to the University of Calgary's
Computer Science web server. You'll work with real-world web server log data to
extract meaningful insights and demonstrate your Python data analysis skills.
Dataset Information

Source Details
‚óè Dataset Name: Calgary HTTP Dataset
‚óè Dataset Source: https://ita.ee.lbl.gov/html/contrib/Calgary-HTTP.html
‚óè Download URL: ftp://ita.ee.lbl.gov/traces/calgary_access_log.gz
‚óè Format: ASCII text file (one request per line)
‚óè File Size:
‚óã Compressed: 5.4 MB
‚óã Uncompressed: 52.3 MB

Data Structure
Each log entry contains the following space-separated fields:
Field Description Example
host

Request origin: "local" (University of
Calgary) or "remote" (external)

remote

timestamp Request timestamp

Mon Oct 24
14:23:15 1994
filename Requested file in "num.type" format 1234.html
http_code HTTP response status code 200, 404, 500
bytes

Response size in bytes (or - if
unavailable)

2048



Apache Common Log Format Reference
The dataset follows the standard Apache Common Log Format used by W3C HTTPD
servers:
remotehost rfc931 authuser [date] "request" status bytes

Field Definitions
Field Meaning Notes
remotehost Remote hostname or IP address IP used if hostname unavailable
rfc931 Remote logname of user Hyphen (-) if unavailable
authuser Authenticated username Hyphen (-) if not authenticated
[date] Request timestamp Format: [day/month/year:hour:minute:second zone]
"request" Full HTTP request line Example: "GET index.html HTTP/1.0"
status HTTP status code 200, 404, 500, etc.
bytes Content-length transferred Size in bytes

Sample Request Breakdown
"GET index.html HTTP/1.0"
‚îú‚îÄ‚îÄ Method: GET
‚îú‚îÄ‚îÄ Resource: index.html
‚îî‚îÄ‚îÄ Protocol: HTTP/1.0

Assessment Tasks

Part 1: Data Loading and Cleaning
Download and Load Data
‚óè Download the compressed dataset from the FTP server
‚óè Handle the `.gz` compression format appropriately
‚óè Load the data into a suitable Python data structure
‚óè Implement proper error handling for network/file operations
Data Cleaning
‚óè Parse timestamp strings into `datetime` objects
Confidential do not share https://mapup.ai/ 3

‚óè Extract file extensions from the filename field
‚óè Handle missing or malformed data entries
‚óè Convert data types appropriately (integers, strings, etc.)
‚óè Remove or flag invalid log entries
Part 2: Analysis Questions (5 marks each)
‚óè Q1: Count of total log records
‚óã Description: Count the total number of HTTP requests in the log file.
Each line represents one log entry.
‚óã Return Type: int
‚óã Example: 123456
‚óè Q2: Count of unique hosts
‚óã Description: Determine the number of distinct hosts (IP addresses or
domain names) that accessed the server.
‚óã Return Type: int
‚óã Example: 8567
‚óè Q3: Date-wise unique filename counts
‚óã Description: For each date, count how many unique filenames were
requested.
‚óã Return Type: dict[str, int]
‚óã Format: { '01-Jul-1995': 123, '02-Jul-1995': 150 }
‚óã Note: Date format must be 'dd-MMM-yyyy'
‚óè Q4: Number of 404 response codes
‚óã Description: Count how many HTTP requests resulted in a 404 (Not
Found) response.
‚óã Return Type: int
‚óã Example: 3490
‚óè Q5: Top 15 filenames with 404 responses
‚óã Description: Find the 15 most requested URLs that resulted in a 404
error, sorted by frequency.
‚óã Return Type: list[tuple[str, int]]
‚óã Format: [('missing.html', 200), ('notfound.gif', 123), ...]
‚óè Q6: Top 15 file extensions with 404 responses
‚óã Description: Identify the file extensions (like .html, .jpg) that caused the
most 404 errors.
‚óã Return Type: list[tuple[str, int]]
‚óã Format: [('html', 345), ('gif', 220), ...]
‚óè Q7: Total bandwidth transferred per day for July 1995
‚óã Description: Sum the bytes transferred per day for July 1995 (exclude
missing or '-' byte values).
‚óã Return Type: dict[str, int]

Confidential do not share https://mapup.ai/ 4

‚óã Format: { '01-Jul-1995': 123456789, ... }
‚óè Q8: Hourly request distribution
‚óã Description: Count how many HTTP requests occurred during each
hour (0‚Äì23).
‚óã Return Type: dict[int, int]
‚óã Format: { 0: 1200, 1: 900, ..., 23: 670 }
‚óè Q9: Top 10 most requested filenames
‚óã Description: Identify the top 10 most frequently requested filenames,
regardless of status code.
‚óã Return Type: list[tuple[str, int]]
‚óã Format: [('index.html', 5678), ('home.gif', 4321), ...]
‚óè Q10: HTTP response code distribution
‚óã Description: Count the occurrences of each HTTP response status code
(e.g., 200, 404).
‚óã Return Type: dict[int, int]
‚óã Format: { 200: 150000, 404: 3200, 500: 87 }

Deliverables
Candidates are required to submit the following items as part of their assessment.
Submissions must follow the folder structure and format guidelines exactly. Failure
to comply may result in disqualification.
üìÅ Folder Structure (Final ZIP)

Compress the calgary-http-assessment/ folder into a single ZIP file:
calgary-http-assessment.zip

File Requirements
File Name Format Description
analysis.ipynb .ipynb

Jupyter Notebook with all output cells included. Notebooks
without output will be rejected.

Confidential do not share https://mapup.ai/ 5

analysis.html .html

Exported version of the notebook for quick viewing. Use "File
> Export Notebook As > HTML".

transcript.txt .txt

Full transcript of the video. You may upload your video as
unlisted on YouTube and use YouTube's transcript feature.
Then, paste the transcript in a .txt file.

README.md .md

(Optional) Notes on approach, assumptions, tools used, or
challenges.

Video Instructions (Not Part of ZIP)
You must create a short screen recording in English where you:
‚óè Explain your code and logic
‚óè Execute the notebook from start to finish
‚óè Briefly describe your approach and any challenges
Upload the video as an unlisted video on YouTube and provide the video link in the
Google Form. Do not include the video in the ZIP file.
Instructions
‚óè Language: All materials (notebook, comments, video, transcript) must be in
English.
‚óè Notebook Outputs: Ensure all cells in analysis.ipynb are executed. Notebooks
without visible output cells will be rejected.
‚óè Transcript: Must reflect the spoken content in your video. You may use
YouTube's auto-generated transcript as a base.
‚óè File Naming: Do not rename the required files. Follow the structure exactly.
‚óè Folder Structure: Use the exact structure above. Do not include extra files or
folders.
‚óè Final Submission: Upload a ZIP named calgary-http-assessment.zip and paste
your YouTube video link into the Google Form.
Good luck with your analysis! This assessment will demonstrate your ability to work
with real-world data and extract meaningful insights from web server logs.



